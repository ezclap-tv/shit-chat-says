use juniper::{EmptySubscription, GraphQLInputObject, GraphQLObject, RootNode};

pub type Schema = RootNode<'static, crate::SCSQueries, crate::SCSMutations, EmptySubscription<crate::SharedContext>>;

pub fn schema() -> Schema {
  Schema::new(crate::SCSQueries, crate::SCSMutations, EmptySubscription::<_>::new())
}

/// THe information about a log file of a channel
#[derive(Clone, GraphQLObject)]
pub struct LogFile {
  /// The name of the log file
  pub name: String,
  /// The size of the log file in megabytes
  pub size: f64,
}

#[derive(Clone, GraphQLObject)]
pub struct Channel {
  /// The name of the channel
  pub name: String,
  /// The list of the log files recorded for this channel
  pub log_files: Vec<LogFile>,
  /// The total size of all log files of the channel in megabytes
  pub total_size: f64,
}

/// The meta-information about a markov chain model
#[derive(Debug, Clone, GraphQLObject)]
pub struct ModelMeta {
  /// The name of the model
  pub name: String,
  /// The size of the model in megabytes
  pub size: f64,
  /// The order of the model
  pub order: i32,
  /// The metadata string of the model
  pub metadata: String,
}

/// The information about a markov chain model file
#[derive(Clone, GraphQLObject)]
pub struct ModelInfo {
  /// The size of the model in megabytes
  pub size: f64,
  /// The name of the model
  pub name: String,
  /// Whether this model is compressed
  pub is_compressed: bool,
  /// The date the model file was written to disk
  pub date_created: chrono::DateTime<chrono::Utc>,
  /// The date the model file was modified
  pub date_modified: chrono::DateTime<chrono::Utc>,
}

/// The input with the information necessary to generate text
#[derive(Clone, GraphQLInputObject)]
pub struct ModelInput {
  /// The name of the model to use name
  pub name: String,
  /// A seed phrase to provide to the model. Only the first `order` or less words will be used.
  pub seed_phrase: Option<String>,
  /// The number of output phrases to generate.
  pub n_outputs: Option<i32>,
  /// The maximum number of attempts to make when generating output if the output is bad.
  pub max_samples: Option<i32>,
}

/// A single phrase outputted by a model
#[derive(Clone, GraphQLObject)]
pub struct ModelOutput {
  /// The generated text. Empty if the chain didn't output anything
  pub text: Option<String>,
  /// The exact number of attempts performed to generate the text
  pub num_samples: i32,
}

/// The resulting phrases corresponding to a [`ModelInput`] query
#[derive(Clone, GraphQLObject)]
pub struct ModelResult {
  /// The phrases generated by the model
  pub outputs: Vec<ModelOutput>,
  /// The maximum number of samples use to generate the outputs
  pub max_samples: i32,
}

pub struct LoadedModel {
  pub meta: ModelMeta,
  pub model: crate::loaders::ThreadSafeGenerator,
}

pub struct CachedModel {
  pub path: std::path::PathBuf,
  pub info: ModelInfo,
  pub loaded: Option<LoadedModel>,
}

impl Clone for CachedModel {
  fn clone(&self) -> Self {
    Self {
      path: self.path.clone(),
      info: self.info.clone(),
      loaded: None,
    }
  }
}
